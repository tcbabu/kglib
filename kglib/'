#define D_TH
#include "kulina.h"
#include "gprivate.h"
#include "dlink.h"
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <math.h>
#include <malloc.h>
#include <fcntl.h>
#include <unistd.h>
#include <dirent.h>
#include <sys/stat.h>
#include <stdarg.h>
#include "imageswarn.c"
#include "images.c"
#define RESIZE 5
static int B_max=990000,B_min=989000;
extern int TextSize,Ht,Wd,Gap,Bt;  // It is Okay For Thread;
void *stop_xpm=&Stop_str;
void *mickey_xpm=&Hi_str;
void *qst_xpm=&Warn_str;
static void uiFreemenu(char **m) {
  int i;
  if(m!= NULL) {
    i=0;
    while(m[i]!=NULL) {free(m[i]);i++;}
    free(m);
  }
}
int _check_menu(void *parent, int x0,int y0,char *qst,int df,void *xpm){
  int ret=1;
  int v0;
  DIALOG D;
  DIA d[4];
  DIM m0 = { 
    'm',
    83,12,  
    457,36  ,0,0
  };
  strncpy(m0.msg,qst,499);
  DIP p1 = { 
    'p',
    11,14,  
    74,74,  
    xpm, /* pixmap info */ 
    -1,0,0 /* bkgr colour */ 
  };
  char *titles2[]  = { 
    "No", 
    "Yes", 
    NULL
  };
  void *xpm2[]  = { 
    NULL, NULL, 
    NULL, NULL, 
    NULL, NULL, 
    NULL
  };
  int bkgr2[]  = { 
    -1, 
    -1, 
    -1
  };
  char *butncode2  = NULL;
  int sw[]={1,1};
  DIB n2 = { 
    'b',
    148,45,  
    354,96,
    30,9,  
    80, 
    35, 
    2,1, 
    &v0, 
    sw,
    titles2,
    butncode2,
    NULL,NULL, /* args, Callbak */
    xpm2,bkgr2 /* pointers to xpms and colors */
    ,2,0.5
  };
  v0 = df+1;
  d[0].m = &m0;
  d[1].p = &p1;
  d[2].b = &n2;
  d[3].t = NULL;
  D.VerId=1401010200;
  kgInitUi(&D);
  D.d = d;
  D.bkup = 1; /* set to 1 for backup */
  D.bor_type = 4;
  D.df = -1;
  D.tw = 4;
  D.bw = 4;
  D.lw = 4;
  D.rw = 4;
  D.xo = x0;   /* Position of Dialog */ 
  D.yo = y0;
  D.xl = 500;    /*  Length of Dialog */
  D.yl = 102;    /*  Width  of Dialog */
  D.VerId=1401010200;
  D.Initfun = NULL;    /*  Width  of Dialog */
  D.Deco=1;
  D.DrawBkgr=1;
  D.Bkpixmap=NULL;
  D.Callback=NULL;
  D.transparency = 0.0;
  D.Sticky=0;
  D.Fixpos=0;
  D.NoTaskBar=0;
  D.Newwin=0;
  D.parent=parent;
  D.StackPos=1;
  D.Shapexpm=NULL;
  strcpy(D.name,"Kulina Graphics");
  if(parent== NULL) D.Newwin=1;
  kgDefaultGuiTheme(&(D.gc));
  D.SearchList=NULL;
  D.Resize=0;
  D.ResizeCallback=NULL;
  D.WaitCallback=NULL;
  D.MinWidth=D.MinHeight=200;

  ret= kgUi(&D);
  return (v0-1);
}
int  kgCheckMenu(void *parent,int x,int y,char *qst,int df) {
   return _check_menu(parent,x,y,qst,df,mickey_xpm);
}
int  kgWarnMenu(void *parent,int x,int y,char *qst,int df) {
   return _check_menu(parent,x,y,qst,df,stop_xpm);
}
int  kgQstMenu(void *parent,int x,int y,char *qry,int df) {
   return _check_menu(parent,x,y,qry,df,qst_xpm);
}
int kgSplashDiainit(void *Tmp) {
  int ret = 0,i,j,OK,xl,yl ,count=0,k;
  float ln,length=0,fac=1.0;
  float w_x1=0.0,w_y1=0.0,w_x2=686,w_y2=226,dyl,dxl,yy;
  void *fid,*Img;
  KBEVENT kbe;
  DIALOG *D;
  D = (DIALOG *)Tmp;
  char *pt,buf[5000],flname[200],*str[500];
  DIP *p0 ;
  SPLASHMSG *msg;
  p0 = (D->d[0]).p;
  xl = D->xl;
  yl = D->yl;
  w_x2 = xl;
  w_y2 = yl;
  kgWindowStateAbove(Tmp);
#if 1
  msg = D->pt;
  if(msg->message != NULL) {
    fid = kgInitImage((int)(w_x2-w_x1)+1,(int)(w_y2-w_y1)+1,2);
    kgUserFrame(fid,w_x1,w_y1,w_x2,w_y2);
    kgTextColor(fid,msg->fontcolor);
    kgTextFont(fid,msg->font);
    kgTextSize(fid,30.,20.,0.);
    strcpy(buf,(char *)msg->message);
    pt=buf;
    j=1;
    k=0;
    while(1) {
      i=0;
      if(pt[i]=='\0') break;
//      gphMove2f(fid,40.,yl-j*45.);
      j++;
      OK=1;
      while(pt[i]!='\0') {
        OK=0;
        if((pt[i]=='\n')){ pt[i]='\0';break;}
        if(((pt[i]=='\\')&&(pt[i+1]=='n'))){ pt[i]='\0';i++;break;}
        i++;
        OK=1;
      }
      str[k++]=pt;
      ln = kgStringLength(fid,pt);
      if(length< ln)length=ln;
//      gphWriteText(fid,pt);
      if(OK) break;
      pt = pt+i+1;
    }
    if(k>0 ) {
      dyl = yl/k;
      fac = xl/(length);
      dxl = fac*20;
      kgTextSize(fid,dyl*0.55,dxl,0.);
      yy= yl - dyl*0.7;
      for(i=0;i<k;i++) {
         length=kgStringLength(fid,str[i]);
         kgMove2f(fid,(xl-length)*0.5,yy);
         kgWriteText(fid,str[i]);
         yy -=dyl;
      }
    }
    Img = kgGetResizedImage(fid);
    if(Img==NULL) printf("Img==NULL\n");
    else {
#if 1
//      uiWriteImage(Img,"Junk.png");
      kgCloseImage(fid);
      if(msg->message != NULL) {
        if(p0->xpm != NULL) {
           kgImage(D,p0->xpm,0,0,xl,yl,0.0,1.0);
           kgImage(D,Img,0,0,xl,yl,0.0,1.0);
        }
        else {
          void *img1;
          int bkcolor;
          bkcolor = msg->bkcolor;
          img1 = kgBorderedRectangle(xl-3,yl-3,bkcolor,0.05);
          kgMergeImages(img1,Img,0,0);
          kgAddTransparency(img1,0.5);
          kgImage(D,img1,0,0,xl,yl,0.0,1.0);
          kgFreeImage(img1);
        }
        uiFreeImage(Img);
      }
#endif
//      printf("kgUpdateOn\n");
      kgUpdateOn(D);
    }
  }
  else {
     if(p0->xpm != NULL) kgImage(D,p0->xpm,0,0,xl,yl,0.0,1.0);
     kgUpdateOn(D);
  }
  while(1) {
    if(!kgCheckEvent(D,&kbe)) {kgThreadSleep(1,0);count++;}
    if(count>20) break;
    if(kbe.event ==1) {
      if(kbe.button ==1) {
          ret=1;
          break;
      }
    }
  }
#endif
  return ret;
}
int kgSplashDiaCallBack(void *Tmp,void *tmp) {
  int ret = 0;
  DIALOG *D;
  KBEVENT *kbe;
  D = (DIALOG *)Tmp;
  kbe = (KBEVENT *)tmp;
  if(kbe->event ==1) {
    if(kbe->button ==1) {
      ret=1;
    }
  }
  return ret;
}
int kgSplashDia( int xo,int yo,int xl,int yl,char  *xpm ,char *message,int font,int fontcolor,unsigned long bkcolor) {
  int ret=1;
  DIALOG D;
  DIA d[2];
  DIP p0 = { 
    'p',
    1,1,  
    686,225,  
    NULL , // Pixmap info
    -1,0,0,0.005 /* bkgr colour */ 
  };
  SPLASHMSG msg;
  msg.message=message;
  msg.font =font;
  msg.fontcolor = fontcolor;
  msg.bkcolor   = bkcolor;
  d[0].p = &p0;
  d[1].t = NULL;
  D.d = d;
  D.VerId=1401010000;
  kgInitUi(&D);
  D.bkup = 1; /* set to 1 for backup */
  D.bor_type = 0;
  D.df = 0;
  D.tw = 4;
  D.bw = 4;
  D.lw = 4;
  D.rw = 4;
  D.xo = 267;   /* Position of Dialog */ 
  D.yo = 204;
  D.xl = xl;    /*  Length of Dialog */
  D.yl = yl;    /*  Width  of Dialog */
  D.Initfun = kgSplashDiainit;    /*   init fuction for Dialog */
  D.kbattn = 1;    /*  1 for drawing keyborad attention */
  D.butattn = 1;    /*  1 for drawing button attention */
  D.fullscreen = 0;    /*  1 for for fullscreen mode */
  D.Deco = 0;    /*  1 for Window Decorration */
  D.transparency = 1.0;    /*  float 1.0 for full transparency */
  D.Newwin = 1;    /*  1 for new window not yet implemented */
  D.DrawBkgr = 0;    /*  1 for drawing background */
  D.Bkpixmap = NULL;    /*  background image */
  D.Sticky = 1;    /*  1 for stickyness */
#if 0 
  D.Callback = kgSplashDiaCallBack;    /*  default callback */
#else 
  D.Callback = NULL;    
#endif
  D.Fixpos = 1;    /*  1 for Fixing Position */
  D.NoTaskBar = 1;    /*  1 for not showing in task bar*/
  D.parent = NULL;    /*  1 for not showing in task bar*/
  strcpy(D.name,"Kulina Designer ver 1.0");    /*  Dialog name you may change */
  if(D.fullscreen!=1) {    /*  if not fullscreen mode */
     int xres,yres; 
     GetDisplaySize(&xres,&yres); 
      // D.xo=D.yo=0; D.xl = xres-10; D.yl=yres-80;
     if((xo<0)||(yo<0)) {
       D.xo= (xres-xl)/2;
       D.yo= (yres-yl)/2;
     }
     else {D.xo=xo;D.yo=yo;}
     p0.x1=4; p0.y1=4;
     p0.x2=xl-4; p0.y2=yl-4;
  }
  else {    // for fullscreen
     int xres,yres; 
     GetDisplaySize(&xres,&yres); 
     D.xo=D.yo=0; D.xl = xres; D.yl=yres;
  }    /*  end of fullscreen mode */
  if(xpm != NULL) {
    p0.xpm = xpm;
  }
  D.pt =  &msg;
  D.StackPos = 1;    /*  1 for above */
  D.Shapexpm=NULL;
  kgDefaultGuiTheme(&(D.gc));    /*  set colors for gui*/
  D.SearchList=NULL;
  D.Resize=0;
  D.ResizeCallback=NULL;
  D.WaitCallback=NULL;
  D.MinWidth=D.MinHeight=200;
  ret= kgUi(&D);
//  printf("Splashdia over\n");
  return ret;
}
int kgSplashMessageinit(void *Tmp) {
  int ret = 0,i,j,OK,xl,yl ,count=0,k,color,r,g,b,fcolor;
  float ln,length=0,fac=1.0;
  float w_x1=0.0,w_y1=0.0,w_x2=686,w_y2=226,dyl,dxl,yy;
  float h,s,v,Vb,rf,gf,bf;
  void *fid,*Img;
  float rfac=0.15,xo,yo,l,w;
  KBEVENT kbe;
  DIALOG *D;
  D = (DIALOG *)Tmp;
  char *pt,buf[5000],flname[200],*str[500];
  DIP *p0 ;
  SPLASHMSG *msg;
  p0 = (D->d[0]).p;
  xl = D->xl;
  yl = D->yl;
  w_x2 = xl;
  w_y2 = yl;
  l = xl;
  w = yl;
//  kgWindowStateAbove(Tmp);
#if 1
  msg = D->pt;
  if(msg->message != NULL) {
//    fid = kgInitImage((int)(w_x2-w_x1)+10,(int)(w_y2-w_y1)+10,4);
//    kgUserFrame(fid,w_x1-5,w_y1-5,w_x2+5,w_y2+5);
    fid = kgInitImage((int)(w_x2-w_x1),(int)(w_y2-w_y1),RESIZE);
    kgUserFrame(fid,w_x1-3,w_y1-3,w_x2+3,w_y2+3);
    color = msg->bkcolor;
    if(color==-1) color = D->gc.fill_clr;
    if(color<-1) {
      color = -color;
      r = color/1000000;
      g = (color/1000)%1000;
      b = (color%1000);
      kgChangeColor(fid,129,r,g,b);
      color= 129;
    }
    fcolor = msg->fontcolor;
    if(fcolor==-1) fcolor = D->gc.fill_clr;
    if(fcolor<-1) {
      fcolor = -fcolor;
      r = fcolor/1000000;
      g = (fcolor/1000)%1000;
      b = (fcolor%1000);
      kgChangeColor(fid,130,r,g,b);
      fcolor= 130;
    }
    kgGetRGB((DIG *)fid,color,&r,&g,&b);
    rf=r;gf=g;bf=b;
    RGBtoHSV(rf,gf,bf,&h,&s,&v);
    Vb = 1.5*v;
    if(Vb >1.) Vb=1.;
    HSVtoRGB(&rf,&gf,&bf,h,s,Vb);
    kgChangeColor(fid,152,(int)rf,(int)gf,(int)bf);
    HSVtoRGB(&rf,&gf,&bf,h,s,0.5*v);
    kgChangeColor(fid,153,(int)rf,(int)gf,(int)bf);
    kgChangeColor(fid,151,(int)r,(int)g,(int)b);
    kgTextColor(fid,fcolor);
    kgTextFont(fid,msg->font);
    kgTextSize(fid,30.,20.,0.);
    xo = (w_x1+w_x2)*.5;
    yo = (w_y1+w_y2)*.5;
    kgRoundedRectangleFill(fid,xo,yo,(float)l+2,(float)w+2,0,153,rfac);
    kgRoundedRectangleFill(fid,xo,yo,(float)l+1,(float)w+1,0,152,rfac);
    kgRoundedRectangleFill(fid,xo,yo,(float)l-4,(float)w-4,0,151,rfac);
//    kgRoundedRectangleFill(fid,(w_x1+w_x2)*.5+3,(w_y1+w_y2)*.5-2,w_x2-6,w_y2-6,0,0,0.1);
//    kgRoundedRectangleFill(fid,(w_x1+w_x2)*.5,(w_y1+w_y2)*.5,w_x2-6,w_y2-6,0,color,0.1);
    strcpy(buf,(char *)msg->message);
    pt=buf;
    j=1;
    k=0;
    while(1) {
      i=0;
      if(pt[i]=='\0') break;
//      gphMove2f(fid,40.,yl-j*45.);
      j++;
      OK=1;
      while(pt[i]!='\0') {
        OK=0;
        if((pt[i]=='\n')){ pt[i]='\0';break;}
        if(((pt[i]=='\\')&&(pt[i+1]=='n'))){ pt[i]='\0';i++;break;}
        i++;
        OK=1;
      }
      str[k++]=pt;
      ln = kgStringLength(fid,pt);
      if(length< ln)length=ln;
//      gphWriteText(fid,pt);
      if(OK) break;
      pt = pt+i+1;
    }
    if(k>0 ) {
      dyl = (float)(yl-6)/k;
      dxl = 0.75*dyl;
      fac = (float)(xl-10)/(length);
      if(dxl >fac*20) dxl = fac*20;
      kgTextSize(fid,0.6*dyl,dxl,0.);
      yy= yl - dyl*0.7-3;
      for(i=0;i<k;i++) {
         length=kgStringLength(fid,str[i]);
         kgMove2f(fid,(xl-length)*0.5,yy);
         kgWriteText(fid,str[i]);
         yy -=dyl;
      }
    }
    Img = kgGetSharpImage(fid);
    if(Img==NULL) printf("Img==NULL\n");
    else {
#if 1
//      uiWriteImage(Img,"Junk.png");
      kgCloseImage(fid);
      if(msg->message != NULL) {
        if(p0->xpm != NULL) kgImage(D,p0->xpm,D->xo,D->yo,xl,yl,0.0,1.0);
          kgImage(D,Img,D->xo,D->yo,xl,yl,0.0,1.0);
          uiFreeImage(Img);
      }
#endif
//      printf("kgUpdateOn\n");
      kgUpdateOn(D);
    }
  }
  while(1) {
    if(!kgCheckEvent(D,&kbe)) {kgThreadSleep(1,0);count++;}
    if(count>1) break;
    if(kbe.event ==1) {
      if(kbe.button ==1) {
          ret=1;
          break;
      }
    }
  }
#endif
  return ret;
}
int kgSplashMessageCallBack(void *Tmp,void *tmp) {
  int ret = 0;
  DIALOG *D;
  KBEVENT *kbe;
  D = (DIALOG *)Tmp;
  kbe = (KBEVENT *)tmp;
  if(kbe->event ==1) {
    if(kbe->button ==1) {
      ret=1;
    }
  }
  return ret;
}
int kgSplashMessage( void *Parent,int xo,int yo,int xl,int yl,char *message,int font,int fontcolor,int bkcolor) {
  int ret=1;
  DIALOG D;
  DIA d[2];
  DIP p0 = { 
    'p',
    1,1,  
    686,225,  
    NULL , // Pixmap info
    -1,0,0 /* bkgr colour */ 
  };
  SPLASHMSG msg;
  msg.message=message;
  msg.font =font;
  msg.fontcolor = fontcolor;
  msg.bkcolor   = bkcolor;
  d[0].p = &p0;
  d[1].t = NULL;
  D.VerId=1401010200;
  kgInitUi(&D);
  D.d = d;
  D.bkup = 1; /* set to 1 for backup */
  D.bor_type = 0;
  D.df = 0;
  D.tw = 0;
  D.bw = 0;
  D.lw = 0;
  D.rw = 0;
  D.xo = xo;
  D.yo = yo;
  D.xl = xl;    /*  Length of Dialog */
  D.yl = yl;    /*  Width  of Dialog */
  D.Initfun = kgSplashMessageinit;    /*   init fuction for Dialog */
  D.kbattn = 0;    /*  1 for drawing keyborad attention */
  D.butattn = 0;    /*  1 for drawing button attention */
  D.fullscreen = 0;    /*  1 for for fullscreen mode */
  D.Deco = 0;    /*  1 for Window Decorration */
  D.transparency = 1.0;    /*  float 1.0 for full transparency */
  D.Newwin = 0;    /*  1 for new window not yet implemented */
  D.DrawBkgr = 0;    /*  1 for drawing background */
  D.Bkpixmap = NULL;    /*  background image */
  D.Sticky = 1;    /*  1 for stickyness */
#if 0 
  D.Callback = kgSplashMessageCallBack;    /*  default callback */
#else 
  D.Callback = NULL;    
#endif
  D.Fixpos = 1;    /*  1 for Fixing Position */
  D.NoTaskBar = 1;    /*  1 for not showing in task bar*/
  D.parent = Parent;    /*  1 for not showing in task bar*/
  strcpy(D.name,"Kulina Designer ver 1.0");    /*  Dialog name you may change */
  if(D.fullscreen!=1) {    /*  if not fullscreen mode */
     int xres,yres; 
     GetDisplaySize(&xres,&yres); 
      // D.xo=D.yo=0; D.xl = xres-10; D.yl=yres-80;
     p0.x1=0; p0.y1=0;
     p0.x2=xl; p0.y2=yl;
  }
  else {    // for fullscreen
     int xres,yres; 
     GetDisplaySize(&xres,&yres); 
     D.xo=D.yo=0; D.xl = xres; D.yl=yres;
  }    /*  end of fullscreen mode */
  p0.xpm = NULL;
  D.pt =  &msg;
  D.StackPos = 1;    /*  1 for above */
  D.Shapexpm=NULL;
  kgDefaultGuiTheme(&(D.gc));    /*  set colors for gui*/
  D.SearchList=NULL;
  D.Resize=0;
  D.ResizeCallback=NULL;
  D.WaitCallback=NULL;
  D.MinWidth=D.MinHeight=200;
  ret= kgUi(&D);
  return ret;
}
void *RunkgSplashDia(void *arg) {
/*************************************************


*************************************************/
   SPLASHMSG *pt;
   pt = (SPLASHMSG *)arg;
   kgSplashDia(-1,-1,pt->xsize,pt->ysize,pt->xpm,pt->message,pt->font,pt->fontcolor,pt->bkcolor);
   return NULL;
}
void kgInitDialog( DIALOG *D ,int xo,int yo,char **menu,int size) {
  float length;
  int ret=1,i,lngth=50,ln;
  i=0;
  while(menu[i]!= NULL) {
    length=uiStringLength(menu[i],TextSize);
    ln = (int)(length)+10;
//    ln = strlen(menu[i])*9+15;
    if(ln>lngth) lngth=ln;
    i++;
  }
  D->d = NULL;
  D->bkup = 1; /* set to 1 for backup */
  D->bor_type = 4;
  D->df = 0;
  D->xo = xo;   /* Position of Dialog */ 
  D->yo = yo;
  D->xl = lngth+2;    /*  Length of Dialog */
  D->yl = (size+1)*20+0;    /*  Width  of Dialog */
  D->fullscreen = 0;    /*  1 for for fullscreen mode */
  D->Deco = 0;    /*  1 for Window Decorration */
  D->transparency = 000000;    /*  float 1.0 for full transparency */
  D->Newwin = 1;    /*  1 for new window not yet implemented */
  D->DrawBkgr = 1;    /*  1 for drawing background */
  D->Bkpixmap = NULL;    /*  background image */
  D->Sticky = 0;    /*  1 for stickyness */
  D->Callback = NULL;    
  D->Fixpos = 1;    /*  1 for Fixing Position */
  D->NoTaskBar = 1;    /*  1 for not showing in task bar*/
  D->StackPos=1;
  D->parent = NULL;
  D->pt = NULL;    /*  any data to be passed by user*/
  D->Shapexpm=NULL;
  strcpy(D->name,"Kulina Designer ver 1.0");    /*  Dialog name you may change */
  kgDefaultGuiTheme(&(D->gc));
  uiDialogWindow(D);
  D->evgay=WC(D)->EVGAY;
  D->evgax=WC(D)->EVGAX;
  return ;
}
int kgMenu(void *parent,int xx1,int yy1,int pos,int df,char **menu,int size){
  char **x;
  int NOK=1,item,ok,tempc;
  float fac=1.;
  BRW_STR *br;
  KBEVENT kbevent;
  DIALOG *D=NULL,Dtmp;
  kgWC *wc;
  if(parent != NULL) D= (DIALOG *)(parent);
  else {
    kgInitDialog(&Dtmp,xx1,yy1,menu,size);
    D = &Dtmp;
    xx1=-8,yy1=2;
  }
  wc = WC(D);
  tempc = wc->c_color;
  uiUpdateOff(D);
  br =(BRW_STR *) make_menu_str(D,xx1,yy1,pos,df,menu,size);
  item = br->df;
  x = br->menu;
  if(br->menu[0]==NULL) return 1;
  NOK=1;
  uiUpdateOn(D);
  while(NOK!=0) {
    kbevent = kgSkipMouseMove(D);
//    set_pointer_position(kbevent.x,kbevent.y,kbevent.button);
    D->PON_X=kbevent.x; D->PON_Y=kbevent.y;
    switch(kbevent.event) {
       case 0:
          _ui_scroll_item_hilight(br,kbevent);
          continue;
       case 1:
          ok = _ui_process_scroll_click(br,kbevent);
          if(ok >= 0 ){
             if(ok==0) br->df=item;
             NOK=0;
             kgWaitButtonRelease(D);
          }
          continue;
       case 2:
          continue;
       case 3:
          _ui_process_scroll_move(br,kbevent);
          continue;
       case 4:
          continue;
       case 5:
          ok = _ui_process_scroll_key(br,kbevent);
          if(ok >= 0 ){
             if(ok==0) br->df=item;
             NOK=0;
             kgWaitButtonRelease(D);
          }
          continue;
    }
  }
//  char_hilit_on();
  if(ok> 0) item = br->df;
  else item=0;
//  clear_menu();
  kg_scr_recover(D->wc);
  free(br);
  wcset_clr(wc,tempc);
  kgSkipEvents(D);
  if(parent==NULL) {
     pthread_cancel(WC(D)->Pth);
     Dempty(WC(D)->Clip);
     kg_clear_scrn_buffer(WC(D));
//     Dempty(WC(D)->SBlist);
     Dempty(WC(D)->TLIST);
     free(WC(D)->kgcolors);
     kgCloseUi(D);
     free(WC(D));
  }
  return(item);
 }
int  kgFontListDiabrowser1callback(int key,int i,void *Tmp) {
  DIA *D;DIE *B; 
  int ret=1; 
  D = ((DIALOG *)Tmp)->d;
  B = D[i].e;
  switch(key) {
    case 1: 
      break;
  }
  return ret;
}
int kgFontListDiainit(void *Tmp) {
  int ret = 1;
  DIALOG *D;
  D = (DIALOG *)Tmp;
  return ret;
}
int kgFontListDiaCallBack(void *Tmp,void *tmp) {
  int ret = 0;
  DIALOG *D;
  KBEVENT *kbe;
  D = (DIALOG *)Tmp;
  kbe = (KBEVENT *)tmp;
  if(kbe->event ==1) {
    if(kbe->button ==1) {
    }
  }
  return ret;
}
int kgFontListDia( void *parent ,void *v0 ,int xo,int yo) {
  int ret=1;
  DIALOG D;
  DIA d[2];
  char *menu0[]  = { 
    (char *)"",
    NULL 
  };
  DIE e0 = { 
    'e',
    3,4,  
    407,380,   
    16,  
    (int *)v0,
    NULL,
    menu0 ,
    NULL,kgFontListDiabrowser1callback, /* *args, callback */
    20,6,22,1,1,1,0
  };
  e0.menu = kgFontNames();
  d[0].e = &e0;
  d[1].t = NULL;
  D.VerId=1401010200;
  kgInitUi(&D);
  D.d = d;
  D.bkup = 1; /* set to 1 for backup */
  D.bor_type = 4;
  D.df = 0;
  D.tw = 4;
  D.bw = 4;
  D.lw = 4;
  D.rw = 4;
  D.xo = xo;   /* Position of Dialog */ 
  D.yo = yo;
  D.xl = 411;    /*  Length of Dialog */
  D.yl = 383;    /*  Width  of Dialog */
  D.Initfun = kgFontListDiainit;    /*   init fuction for Dialog */
  D.kbattn = 1;;    /*  1 for drawing keyborad attention */
  D.butattn = 1;    /*  1 for drawing button attention */
  D.fullscreen = 0;    /*  1 for for fullscreen mode */
  D.Deco = 1;    /*  1 for Window Decorration */
  D.transparency = .000000;    /*  float 1.0 for full transparency */
  D.Newwin = 0;    /*  1 for new window not yet implemented */
  D.DrawBkgr = 1;    /*  1 for drawing background */
  D.Bkpixmap = NULL;    /*  background image */
  D.Sticky = 0;    /*  1 for stickyness */
#if 0 
  D.Callback = kgFontListDiaCallBack;    /*  default callback */
#else 
  D.Callback = NULL;    
#endif
  D.Fixpos = 1;    /*  1 for Fixing Position */
  D.NoTaskBar = 0;    /*  1 for not showing in task bar*/
  D.StackPos = 1;    /* -1,0,1 for for Stack Position -1:below 0:normal 1:above*/
  D.Shapexpm = NULL;    /*  PNG/jpeg file for window shape;Black color will not be drawn */
  D.parent = parent;    /*  1 for not showing in task bar*/
  D.pt = NULL;    /*  any data to be passed by user*/
  strcpy(D.name,"Kulina Font List");    /*  Dialog name you may change */
  if(D.fullscreen!=1) {    /*  if not fullscreen mode */
     int xres,yres; 
     GetDisplaySize(&xres,&yres); 
      // D.xo=D.yo=0; D.xl = xres-10; D.yl=yres-80;
  }
  else {    // for fullscreen
     int xres,yres; 
     GetDisplaySize(&xres,&yres); 
     D.xo=D.yo=0; D.xl = xres; D.yl=yres;
  }    /*  end of fullscreen mode */
  kgDefaultGuiTheme(&(D.gc));    /*  set colors for gui*/
  D.SearchList=NULL;
  D.Resize=0;
  D.ResizeCallback=NULL;
  D.WaitCallback=NULL;
  D.MinWidth=D.MinHeight=200;
  ret= kgUi(&D);
  kgFreeFontNames(e0.menu);
  return ret;
}
int kgGetFont(void *arg,int xo,int yo) {
/*************************************************

    Scrollmenu1  1 data value

*************************************************/
   int   v0 = 1;
   kgFontListDia(arg ,&v0 ,xo,yo);
   return v0-1;
}
int kgColorsDia( void *parent ,void *v0 ,int xo, int yo) {
  int ret=1;
  DIALOG D;
  DIA d[2];
  char *titles0[]  = { 
    (char *)"0", (char *)"1", (char *)"2", (char *)"3", (char *)"4", (char *)"5", (char *)"6", (char *)"7", 
    (char *)"8", (char *)"9", (char *)"10", (char *)"11", (char *)"12", (char *)"13", (char *)"14", (char *)"15", 
    (char *)"16", (char *)"17", (char *)"18", (char *)"19", (char *)"20", (char *)"21", (char *)"22", (char *)"23", 
    (char *)"24", (char *)"25", (char *)"26", (char *)"27", (char *)"28", (char *)"29", (char *)"30", (char *)"31", 
    (char *)"32", (char *)"33", (char *)"34", (char *)"35", (char *)"36", (char *)"37", (char *)"38", (char *)"39", 
    (char *)"40", (char *)"41", (char *)"42", (char *)"43", (char *)"44", (char *)"45", (char *)"46", (char *)"47", 
    (char *)"48", (char *)"49", (char *)"50", (char *)"51", (char *)"52", (char *)"53", (char *)"54", (char *)"55", 
    (char *)"56", (char *)"57", (char *)"58", (char *)"59", (char *)"60", (char *)"61", (char *)"62", (char *)"63", 
    NULL
  };
  void *xpm0[]  = { 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
  };
  int bkgr0[]  = { 
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 
    31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 
    60, 61, 62, 63, -1
  };
  char *butncode0  = NULL;
  int sw0[]={1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
            ,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
  DIB n0 = { 
    'b',
    6,4,  
    339,331,
    0,0,  
    40, 
    40, 
    8,8, 
    (int *)v0, 
    sw0,
    titles0,
    butncode0,
    NULL,NULL,
    xpm0,bkgr0, /* pointers to xpms and colors */
      1,0.200000 /* button type and roundinfg factor(0-0.5) */
  };
  d[0].b = &n0;
  d[1].t = NULL;
  D.VerId=1401010200;
  kgInitUi(&D);
  D.d = d;
  D.bkup = 1; /* set to 1 for backup */
  D.bor_type = 4;
  D.df = 0;
  D.tw = 4;
  D.bw = 4;
  D.lw = 4;
  D.rw = 4;
  D.xo = xo;   /* Position of Dialog */ 
  D.yo = yo;
  D.xl = 341;    /*  Length of Dialog */
  D.yl = 337;    /*  Width  of Dialog */
  D.Initfun = NULL;
  D.kbattn = 0;;    /*  1 for drawing keyborad attention */
  D.butattn = 1;    /*  1 for drawing button attention */
  D.fullscreen = 0;    /*  1 for for fullscreen mode */
  D.Deco = 1;    /*  1 for Window Decorration */
  D.transparency = 0.000000;    /*  float 1.0 for full transparency */
  D.Newwin = 0;    /*  1 for new window not yet implemented */
  D.DrawBkgr = 1;    /*  1 for drawing background */
  D.Bkpixmap = NULL;    /*  background image */
  D.Sticky = 0;    /*  1 for stickyness */
#if 0 
  D.Callback = kgColorsDiaCallBack;    /*  default callback */
#else 
  D.Callback = NULL;    
#endif
  D.Fixpos = 1;    /*  1 for Fixing Position */
  D.NoTaskBar = 0;    /*  1 for not showing in task bar*/
  D.StackPos = 1;    /* -1,0,1 for for Stack Position -1:below 0:normal 1:above*/
  D.Shapexpm = NULL;    /*  PNG/jpeg file for window shape;Black color will not be drawn */
  D.parent = parent;    /*  1 for not showing in task bar*/
  D.pt = NULL;    /*  any data to be passed by user*/
  strcpy(D.name,"Kulina Designer ver 1.0");    /*  Dialog name you may change */
  if(D.fullscreen!=1) {    /*  if not fullscreen mode */
     int xres,yres; 
     GetDisplaySize(&xres,&yres); 
      // D.xo=D.yo=0; D.xl = xres-10; D.yl=yres-80;
  }
  else {    // for fullscreen
     int xres,yres; 
     GetDisplaySize(&xres,&yres); 
     D.xo=D.yo=0; D.xl = xres; D.yl=yres;
  }    /*  end of fullscreen mode */
  kgDefaultGuiTheme(&(D.gc));    /*  set colors for gui*/
//  kgGrayGuiTheme(&(D.gc));    /*  set colors for gui*/
  D.Resize=0;
  D.ResizeCallback=NULL;
  D.WaitCallback=NULL;
  D.MinWidth=D.MinHeight=200;
  D.SearchList=NULL;
  ret= kgUi(&D);
  return ret;
}
int kgGetColor_o(void *parent,int xo,int yo,int *r,int *g,int *b) {
/*************************************************

    Buttonbox1 (new) 1 data value

*************************************************/
   int   v0 = 1;
   kgColorsDia(parent ,&v0 ,xo,yo);
   kgGetDefaultRGB(v0-1,r,g,b);
   return v0-1;
}
void uiDrawColorInPixmap_o(void *Tmp) {
  int r,g,b,bkgr=255;
  int fid;
  int *ioldclr;
  int xo=385,yo=185,xsize=48,ysize=48;
  DIALOG *D;
  void *img=NULL;
  char *tmpdir,flname[200];
  D = (DIALOG *)Tmp;
  ioldclr = (int *)(D->pt);
  r = uiGetDslide(Tmp,1);
  g = uiGetDslide(Tmp,2);
  b = uiGetDslide(Tmp,3);
  if( (abs(r-ioldclr[3])+abs(g-ioldclr[4])+abs(b-ioldclr[5])) < 5 ) return;
  ioldclr[3]=r; ioldclr[4]=g; ioldclr[5]=b;
  tmpdir=kgMakeTmpDir();
  sprintf(flname,"%-s/Tmp.gph",tmpdir);
  fid = open(flname,O_CREAT|O_TRUNC|O_RDWR,0700);
  if(fid >=0 ) {
      gphUserFrame(fid,0.,0.,(float)xsize,(float)ysize);
      gphChangeColor(fid,bkgr,r,g,b);
      gphBoxFill(fid,0.,0.,(float)xsize,(float)ysize,bkgr,0);
      close(fid);
      img=kgGphtoAntialiasedImage(flname,xsize,ysize,0x00000000,1);
      kgImage(Tmp,img,xo,yo,xsize,ysize,0.0,1.0);
      uiFreeImage(img);
      close(fid);
  }
  kgCleanDir(tmpdir);
  free(tmpdir);
}
void uiDrawColorInPixmap1_o(void *Tmp) {
  int r,g,b,bkgr=255;
  int fid;
  int *ioldclr;
  int xo=320,yo=185,xsize=48,ysize=48;
  DIALOG *D;
  void *img=NULL;
  char *tmpdir,flname[200];
  D = (DIALOG *)Tmp;
  ioldclr = (int *)(D->pt);
  r = ioldclr[0];
  g = ioldclr[1];
  b = ioldclr[2];
  tmpdir=kgMakeTmpDir();
  sprintf(flname,"%-s/Tmp.gph",tmpdir);
  fid = open(flname,O_CREAT|O_TRUNC|O_RDWR,0700);
  if(fid >=0 ) {
      gphUserFrame(fid,0.,0.,(float)xsize,(float)ysize);
      gphChangeColor(fid,bkgr,r,g,b);
      gphBoxFill(fid,0.,0.,(float)xsize,(float)ysize,bkgr,0);
      close(fid);
      img=kgGphtoAntialiasedImage(flname,xsize,ysize,0x00000000,1);
      kgImage(Tmp,img,xo,yo,xsize,ysize,0.0,1.0);
      uiFreeImage(img);
      close(fid);
  }
  kgCleanDir(tmpdir);
  free(tmpdir);
}
void uiDrawColorInPixmap(void *Tmp) {
  int r,g,b,bkgr=255;
  void * fid;
  int *ioldclr;
  int xo=385,yo=185,xsize=48,ysize=48;
  DIALOG *D;
  DIP *p5;
  void *img=NULL;
  char *tmpdir,flname[200];
  D = (DIALOG *)Tmp;
  ioldclr = (int *)(D->pt);
  r = uiGetDslide(Tmp,1);
  g = uiGetDslide(Tmp,2);
  b = uiGetDslide(Tmp,3);
  if( (abs(r-ioldclr[3])+abs(g-ioldclr[4])+abs(b-ioldclr[5])) < 5 ) return;
  ioldclr[3]=r; ioldclr[4]=g; ioldclr[5]=b;
  p5 = (DIP *)uiGetWidget(Tmp,5);
  uiFreeImage(p5->xpm);
  fid = kgInitImage(xsize,ysize,1);
  if(fid != NULL ) {
      kgUserFrame(fid,0.,0.,(float)xsize,(float)ysize);
      kgChangeColor(fid,bkgr,r,g,b);
      kgBoxFill(fid,0.,0.,(float)xsize,(float)ysize,bkgr,0);
      img = kgGetResizedImage(fid);
      kgCloseImage(fid);
#if 0
      kgImage(Tmp,img,xo,yo,xsize,ysize,0.0,1.0);
      uiFreeImage(img);
#else
      p5->xpm=img;
      uiUpdateWidget((void *)p5);
#endif
  }
//  kgUpdateOn(Tmp);
}
void uiDrawColorInPixmap1(void *Tmp) {
  int r,g,b,bkgr=255;
  void * fid;
  int *ioldclr;
  int xo=320,yo=185,xsize=48,ysize=48;
  DIALOG *D;
  DIP *p4;
  void *img=NULL;
  char *tmpdir,flname[200];
  D = (DIALOG *)Tmp;
  ioldclr = (int *)(D->pt);
  r = ioldclr[0];
  g = ioldclr[1];
  b = ioldclr[2];
  fid = kgInitImage(xsize,ysize,1);
  p4 = (DIP *)uiGetWidget(Tmp,4);
  uiFreeImage(p4->xpm);
  if(fid != NULL ) {
      kgUserFrame(fid,0.,0.,(float)xsize,(float)ysize);
      kgChangeColor(fid,bkgr,r,g,b);
      kgBoxFill(fid,0.,0.,(float)xsize,(float)ysize,bkgr,0);
      img = kgGetResizedImage(fid);
      kgCloseImage(fid);
#if 0
      kgImage(Tmp,img,xo,yo,xsize,ysize,0.0,1.0);
      uiFreeImage(img);
#else
      p4->xpm=img;
      uiUpdateWidget((void *)p4);
#endif
  }
//  kgUpdateOn(Tmp);
}
int  GetColorbutnbox1callback(int key,int i,void *Tmp) {
  DIA *D;DIB *B; 
  int n,ret =0,r,g,b; 
  D = ((DIALOG *)Tmp)->d;
  B = D[i].b;
  n = B->nx*B->ny;
  kgGetDefaultRGB(key-1,&r,&g,&b);
  uiSetDslide(Tmp,1,r);
  uiSetDslide(Tmp,2,g);
  uiSetDslide(Tmp,3,b);
  uiDrawColorInPixmap(Tmp);
  return ret;
}
int  GetColordslide1callback(int val,int i,void *Tmp) {
  DIA *D;DID *SD; 
  int ret=1,r; 
  D = ((DIALOG *)Tmp)->d;
  SD = D[i].d;
  uiDrawColorInPixmap(Tmp);
  return ret;
}
int  GetColordslide2callback(int val,int i,void *Tmp) {
  DIA *D;DID *SD; 
  int ret=1; 
  D = ((DIALOG *)Tmp)->d;
  SD = D[i].d;
  uiDrawColorInPixmap(Tmp);
  return ret;
}
int  GetColordslide3callback(int val,int i,void *Tmp) {
  DIA *D;DID *SD; 
  int ret=1; 
  D = ((DIALOG *)Tmp)->d;
  SD = D[i].d;
  uiDrawColorInPixmap(Tmp);
  return ret;
}
int  GetColorhoribar1callback(int key,int i,void *Tmp) {
  DIA *D;DILN *B; 
  int *ioldclr;
  int n,ret=1; 
  D = ((DIALOG *)Tmp)->d;
  B = D[i].H;
  n = B->nx;
  switch(key) {
    case 1: 
      ioldclr = (int *)(((DIALOG *)Tmp)->pt);
      uiSetDslide(Tmp,1,ioldclr[0]);
      uiSetDslide(Tmp,2,ioldclr[1]);
      uiSetDslide(Tmp,3,ioldclr[2]);
      uiDrawColorInPixmap(Tmp);
      ret=0;
      break;
    case 2:
      break;
  }
  return ret;
}
int GetColorinit(void *Tmp) {
  int ret = 1,color,bkgr=255;
  unsigned char r,g,b;
  int xo=320,yo=185,xsize=48,ysize=48;
  int *ioldclr;
  
  DIALOG *D;
  kgWC *wc;
  D = (DIALOG *)Tmp;
#if 0
  ioldclr = (int *)(D->pt);
  r = ioldclr[0];
  g = ioldclr[1];
  b = ioldclr[2];
  wc =D->wc;
  uichng_clr(Tmp,bkgr,r,g,b);
  color = wc->c_color;
  wcset_clr(wc,bkgr);
  _uiBox_Fill(wc,xo,yo,xo+xsize,yo+ysize);
  wcset_clr(wc,color);
#else
  uiDrawColorInPixmap1(Tmp);
#endif
  uiDrawColorInPixmap(Tmp);
  return ret;
}
int GetColorCallBack(void *Tmp,void *tmp) {
  int ret = 0;
  DIALOG *D;
  KBEVENT *kbe;
  D = (DIALOG *)Tmp;
  kbe = (KBEVENT *)tmp;
  if(kbe->event ==1) {
    if(kbe->button ==1) {
    }
  }
  return ret;
}
int _uiGetColor(void *parent,int xo,int yo, void *v1 ,void *v2 ,void *v3 ) {
  int ret=1;
  int v0=1;
  int ioldclr[6];
  DIALOG D;
  DIA d[13];
  char *titles0[]  = { 
    (char *)"", (char *)"", (char *)"", (char *)"", (char *)"", (char *)"", 
    (char *)"", (char *)"", (char *)"", (char *)"", (char *)"", (char *)"", 
    (char *)"", (char *)"", (char *)"", (char *)"", (char *)"", (char *)"", 
    (char *)"", (char *)"", (char *)"", (char *)"", (char *)"", (char *)"", 
    (char *)"", (char *)"", (char *)"", (char *)"", (char *)"", (char *)"", 
    (char *)"", (char *)"", (char *)"", (char *)"", (char *)"", (char *)"", 
    (char *)"", (char *)"", (char *)"", (char *)"", (char *)"", (char *)"", 
    (char *)"", (char *)"", (char *)"", (char *)"", (char *)"", (char *)"", 
    (char *)"", (char *)"", (char *)"", (char *)"", (char *)"", (char *)"", 
    (char *)"", (char *)"", (char *)"", (char *)"", (char *)"", (char *)"", 
    (char *)"", (char *)"", (char *)"", (char *)"", 
    NULL
  };
  void *xpm0[]  = { 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
    NULL };
  int bkgr0[]  = { 
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
    20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 
    38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 
    56, 57, 58, 59, 60, 61, 62, 63, -1
  };
  char *butncode0  = NULL;
  int sw0[]={1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
            ,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
  DIB n0 = { 
    'b',
    23,16,  
    290,279,
    0,0,  
    32, 
    32, 
    8,8, 
    (int *)&v0, 
    sw0,
    titles0,
    butncode0,
    NULL,GetColorbutnbox1callback, /* args, Callbak */
    xpm0,bkgr0, /* pointers to xpms and colors */
      1,0.000000 /* button type and roundinfg factor(0-0.5) */
  };
  DID d1 = { 
    'd',
    335,20,  
    435,65,   
    0,255,  
    52,  
    (int *)v1,
    (char *)"" ,
    NULL,GetColordslide1callback /* *args, callback */
  };
  DID d2 = { 
    'd',
    335,66,  
    435,112,   
    0,255,  
    52,  
    (int *)v2,
    (char *)"" ,
    NULL,GetColordslide2callback /* *args, callback */
  };
  DID d3 = { 
    'd',
    335,113,  
    435,158,   
    0,255,  
    52,  
    (int *)v3,
    (char *)"" ,
    NULL,GetColordslide3callback /* *args, callback */
  };
    DIP p4 = {
    'p',
    320,185,
    370,235,
    NULL , // Pixmap info
    -1,0,0 /* bkgr colour */
  };
  DIP p5 = {
    'p',
    385,185,
    435,235,
    NULL , // Pixmap info
    -1,0,0 /* bkgr colour */
  };
  DIM m6 = { 
    'm',
    299,39,  
    335,61,  1,0
  };
  strcpy(m6.msg,(char *)"!c03Red");
  DIM m7 = { 
    'm',
    294,84,  
    335,107,  1,0
  };
  strcpy(m7.msg,(char *)"!c02Green");
  DIM m8 = { 
    'm',
    294,128,  
    335,152,  1,0
  };
  strcpy(m8.msg,(char *)"!c01Blue");
  int butn1 =1;
  int sw9[2]  = { 
    1, 
    1  
  };
  char *titles9[]  = { 
    (char *)"Reset", 
    (char *)"Okay", 
    NULL
  };
  void *xpm9[]  = { 
    NULL, /* pixmap info */ 
    NULL, /* pixmap info */ 
    NULL, 
    NULL, 
    NULL, 
    NULL, 
    NULL
  };
  int bkgr9[]  = { 
    -1, 
    -1, 
    -1
  };
  char *butncode9  = NULL;
  DILN H9 = { 
    'H',
    309,241,  
    439,272,
    4,0,
    60, 
    25, 
    2,1, 
    &butn1, 
    sw9,
    titles9,
    butncode9,
    NULL,GetColorhoribar1callback,/* arg, Callbak */
    xpm9,bkgr9, /* pointers to xpms and colors */
     6,0.250000 /* button type and roundinfg factor(0-0.5) */
    ,0
  };
  DIM m10 = { 
    'm',
    331,164,  
    363,188,  1,0
  };
  strcpy(m10.msg,(char *)"Old");
  DIM m11 = { 
    'm',
    396,164,  
    428,188,  
    1,0
  };
  strcpy(m11.msg,(char *)"New");
  ioldclr[0]=*((int*)v1);
  ioldclr[1]=*((int *)v2);
  ioldclr[2]=*((int *)v3);
  ioldclr[3]=-5;
  ioldclr[4]=-5;
  ioldclr[5]=-5;
  d[0].b = &n0;
  d[1].d = &d1;
  d[2].d = &d2;
  d[3].d = &d3;
  d[4].p = &p4;
  d[5].p = &p5;
  d[6].m = &m6;
  d[7].m = &m7;
  d[8].m = &m8;
  d[9].H = &H9;
  d[10].m = &m10;
  d[11].m = &m11;
  d[12].t = NULL;
  D.VerId=1401010200;
  kgInitUi(&D);
  D.d = d;
  D.bkup = 1; /* set to 1 for backup */
  D.bor_type = 4;
  D.df = 5;
  D.tw = 4;
  D.bw = 4;
  D.lw = 4;
  D.rw = 4;
  D.xo = xo;
  D.yo = yo;
  D.xl = 455;    /*  Length of Dialog */
  D.yl = 297;    /*  Width  of Dialog */
  D.Initfun = GetColorinit;    /*   init fuction for Dialog */
  D.kbattn = 0;    /*  1 for drawing keyborad attention */
  D.butattn = 0;    /*  1 for drawing button attention */
  D.fullscreen = 0;    /*  1 for for fullscreen mode */
  D.Deco = 1;    /*  1 for Window Decorration */
  D.transparency = 0.000000;    /*  float 1.0 for full transparency */
  D.Newwin = 0;    /*  1 for new window not yet implemented */
  D.DrawBkgr = 1;    /*  1 for drawing background */
  D.Bkpixmap = NULL;    /*  background image */
  D.Sticky = 0;    /*  1 for stickyness */
#if 0 
  D.Callback = GetColorCallBack;    /*  default callback */
#else 
  D.Callback = NULL;    
#endif
  D.Fixpos = 1;    /*  1 for Fixing Position */
  D.NoTaskBar = 0;    /*  1 for not showing in task bar*/
  D.StackPos = 1;    /* -1,0,1 for for Stack Position -1:below 0:normal 1:above*/
  D.Shapexpm = NULL;    /*  PNG/jpeg file for window shape;Black color will not be drawn */
  D.parent = parent;    /*  1 for not showing in task bar*/
  D.pt =ioldclr;
  strcpy(D.name,"Kulina Get Color");    /*  Dialog name you may change */
  if(D.fullscreen!=1) {    /*  if not fullscreen mode */
     int xres,yres; 
     GetDisplaySize(&xres,&yres); 
      // D.xo=D.yo=0; D.xl = xres-10; D.yl=yres-80;
  }
  else {    // for fullscreen
     int xres,yres; 
     GetDisplaySize(&xres,&yres); 
     D.xo=D.yo=0; D.xl = xres; D.yl=yres;
  }    /*  end of fullscreen mode */
  kgDefaultGuiTheme(&(D.gc));    /*  set colors for gui*/
//  kgColorTheme(&D,210,210,210);    /*  set colors for gui*/
//  ModifyGetColorGc(&(D.gc));    /*  set colors for gui*/
  D.SearchList=NULL;
  D.Resize=0;
  D.ResizeCallback=NULL;
  D.WaitCallback=NULL;
  D.MinWidth=D.MinHeight=200;
  ret= kgUi(&D);
  uiFreeImage(p4.xpm);
  uiFreeImage(p5.xpm);
  return ret;
}
int kgGetColor(void *parent,int xo,int yo,int *r,int *g,int *b) {
/*************************************************

    Buttonbox1 (new) 1 data value
    Integerslidebar1  1 data value
    Integerslidebar2  1 data value
    Integerslidebar3  1 data value

*************************************************/
   int   v0 = 1;
   int   v1 = 255;
   int   v2 = 255;
   int   v3 = 255;
   v1=*r,v2=*g,v3=*b;
   _uiGetColor(parent,xo,yo,&v1 ,&v2 ,&v3 );
   *r = v1;
   *g = v2;
   *b = v3;
   return 1;
}
//########################
#define MAXFLNG 50
typedef struct _dirs {
 char CurDir[500];
 char HomeDir[500];
 char **file;
 char **dir;
} DIRS;
char ** _uiFileMenu(char *dir,char *filter);
void kgTruncateString(char *m,int size) {
  int k,ln;
  if(m!= NULL) {
    ln= strlen(m);
    if(ln>size) { 
      m[ln+1]=m[size-3];
      m[ln+2]=m[size-2];
      m[ln+3]=m[size-1];
      m[ln+4]=m[size];
      m[size-3]='.';
      m[size-2]='.';
      m[size-1]='.';
      m[size]='\0';
    }
  }
  return;
}
void kgRestoreString(char *m,int size) {
  int k,ln;
  k=0;
  if(strlen(m)==size) {
    if((m[size-3]=='.')&&(m[size-2]=='.')&&(m[size-1]=='.')) {
      m[size]='.';
      ln = strlen(m); 
      m[size-3]= m[ln+1];
      m[size-2]= m[ln+2];
      m[size-1]= m[ln+3];
      m[size]= m[ln+4];
    }
  }
  return;
}
void uiTruncateString(char **m,int size) {
  int k,ln;
  k=0;
  while(m[k]!= NULL) {
    ln= strlen(m[k]);
    if(ln>size) { 
      m[k][ln+1]=m[k][size-3];
      m[k][ln+2]=m[k][size-2];
      m[k][ln+3]=m[k][size-1];
      m[k][ln+4]=m[k][size];
      m[k][size-3]='.';
      m[k][size-2]='.';
      m[k][size-1]='.';
      m[k][size]='\0';
    }
   k++;
  }
  return;
}
void uiRestoreString(char *m,int size) {
  int k,ln;
  k=0;
  if(strlen(m)==size) {
    if((m[size-3]=='.')&&(m[size-2]=='.')&&(m[size-1]=='.')) {
      m[size]='.';
      ln = strlen(m); 
      m[size-3]= m[ln+1];
      m[size-2]= m[ln+2];
      m[size-1]= m[ln+3];
      m[size]= m[ln+4];
    }
  }
  return;
}
void uiResetString(char *m,int size) {
  int k,ln;
  k=0;
  if(strlen(m)>size) {
      m[size-3]= '.';
      m[size-2]= '.';
      m[size-1]= '.';
      m[size]= '\0';
  }
  return;
}
char ** _uiFolderMenu(char *d_name) {
  DIR *dp;
  char **menu,*item;
  Dlink *L;
  struct dirent *pt=NULL;
  struct stat st;
  int ln,nd=0,i,type;
  char buf[500];
  dp = opendir(d_name);
  if(dp==NULL) {
    printf("No such dir:%s\n",d_name);
    return NULL;
  }
  L = Dopen();
  while ((pt=readdir(dp))!=NULL) {
     if(pt->d_name[0]=='.')continue;
     strcpy(buf,d_name);
     strcat(buf,"/");
     strcat(buf,pt->d_name);
     stat(buf,&st);
     if(S_ISDIR(st.st_mode)) {
//     if(((st.st_mode & S_IFMT)==S_IFDIR)) {
      ln = strlen(pt->d_name);
      item = (char *)Malloc(ln+5);
      strcpy(item,pt->d_name);
      Dadd(L,item);
//      printf("%s\n",item);
      nd++;
    }
  }
  closedir(dp);
  menu= (char **) Malloc(sizeof(char *)*(nd+1));
  Resetlink(L);
  i=0;
  while( (item= (char *)Getrecord(L))!= NULL) {
   menu[i]=item;
//   printf("%s\n",item);
   i++;
  }
  menu[i]=NULL;
  arrange(menu,i);
  Dfree(L);
  return menu;
}
char ** kgFolderMenu(char *d_name) {
 return _uiFolderMenu(d_name);
}
int  FileBrowsertextbox1callback(int key,int i,void *Tmp) {
  int k,ln;
  DIRS *dirs;
  DIA *D;DIT *T;T_ELMT *e; 
  DIE *E;
  char *filter;
  char **m;
  int ret=1;
  D = ((DIALOG *)Tmp)->d;
  dirs = ((DIALOG *)Tmp)->pt;
  T = D[i].t;
  e = T->elmt;
  filter = Dgetstring(Tmp,i,1);
  m = _uiFileMenu(dirs->CurDir,filter);
  dirs->file=m;
  E = (DIE *)kgGetWidget(Tmp,3);
  kgFreeDouble((void **) (E->menu));
  E->menu=m;
  kgUpdateWidget(E);
  return ret;
}
int  FileBrowserbrowser1callback(int key,int i,void *Tmp) {
  DIA *D;DIE *B; 
  DIE *E;
  DIRS *dirs;
  int ret=0,k,ln; 
  char **m,**dir,**file,*filter,*folder;
  D = ((DIALOG *)Tmp)->d;
  dirs = ((DIALOG *)Tmp)->pt;
  B = D[i].e;
  if(strcmp(dirs->CurDir,"/") != 0)strcat(dirs->CurDir,"/");
  folder=Dgetmenustring(Tmp,i);
  uiRestoreString(folder,50);
  strcat(dirs->CurDir,folder);
  uiinfo_wprintf((DIALOG *)Tmp,((DIALOG *)Tmp)->d[1].i->twin,dirs->CurDir);
  m = _uiFolderMenu(dirs->CurDir);
  uiTruncateString(m,50);
  dir=m;
  filter = Dgetstring(Tmp,0,1);
  m = _uiFileMenu(dirs->CurDir,filter);
  uiTruncateString(m,50);
  file =m;
  E = (DIE *)kgGetWidget(Tmp,3);
  kgFreeDouble((void **) (E->menu));
  uiCleanEbrowserImages(E);
  E->menu=m;
  kgUpdateWidget(E);
  E = (DIE *)kgGetWidget(Tmp,2);
  uiCleanEbrowserImages(E);
  kgFreeDouble((void **) (E->menu));
  E->menu=dir;
  kgUpdateWidget(E);
  dirs->file =file;
  dirs->dir =dir;
  kgUpdateOn((DIALOG *)Tmp);

 switch(key) {
    case 1: 
      break;
  }
  return ret;
}
int  FileBrowserbrowser2callback(int key,int i,void *Tmp) {
  DIA *D;DIW *B; 
  char *m;
  int ret=0,ln; 
  D = ((DIALOG *)Tmp)->d;
  B = D[i].w;
  m=Dgetmenustring(Tmp,i);
  uiRestoreString(m,50);
  kgSetstring(Tmp,0,0,m);
  kgUpdateWidget(kgGetWidget(Tmp,0));
  switch(key) {
    case 1: 
      break;
  }
  kgUpdateOn((DIALOG *)Tmp);
  return ret;
}
int  FileBrowserhoribar1callback(int key,int i,void *Tmp) {
  DIA *D;DILN *B; 
  int n,ret=1; 
  D = ((DIALOG *)Tmp)->d;
  B = D[i].H;
  n = B->nx;
  switch(key) {
    case 1: 
      break;
    case 2: 
      break;
  }
  return ret;
}
int  FileBrowserbutnbox1callback(int key,int i,void *Tmp) {
  DIA *D;DIB *B; 
  DIRS *dirs;
  DIE *E;
  int n,ret =1,k,ln; 
  char **m,*filter,**dir,**file;
  D = ((DIALOG *)Tmp)->d;
  dirs = ((DIALOG *)Tmp)->pt;
  B = D[i].b;
  n = B->nx*B->ny;
  switch(key) {
    case 1: 
      k= strlen(dirs->CurDir);
      while((dirs->CurDir[k]!='/')&&(k>1)) {dirs->CurDir[k]='\0';k--;}
      dirs->CurDir[k]='\0';
      uiinfo_wprintf((DIALOG *)Tmp,((DIALOG *)Tmp)->d[1].i->twin,dirs->CurDir);
      m = _uiFolderMenu(dirs->CurDir);
      uiTruncateString(m,50);
      dir =m;
      break;
  }
  filter = Dgetstring(Tmp,0,1);
  m = _uiFileMenu(dirs->CurDir,filter);
  uiTruncateString(m,50);
//  ui_updatemenu(Tmp,3,m);
//  ui_updatemenu(Tmp,2,dir);
  E = (DIE *)kgGetWidget(Tmp,3);
  kgFreeDouble((void **) (E->menu));
  uiCleanEbrowserImages(E);
  E->menu=m;
  kgUpdateWidget(E);
  E = (DIE *)kgGetWidget(Tmp,2);
  kgFreeDouble((void **) (E->menu));
  uiCleanEbrowserImages(E);
  E->menu=dir;
  kgUpdateWidget(E);
  dirs->file=m;
  dirs->dir=dir;
  kgUpdateOn((DIALOG *)Tmp);
  return ret;
}
int  FileBrowserbutnbox2callback(int key,int i,void *Tmp) {
  DIA *D;DIB *B; 
  DIE *E;
  DIRS *dirs;
  int n,ret =1; 
  char **m,*filter,**dir,**file;
  D = ((DIALOG *)Tmp)->d;
  dirs = ((DIALOG *)Tmp)->pt;
  B = D[i].b;
  n = B->nx*B->ny;
  switch(key) {
    case 1: 
      strcpy(dirs->CurDir,dirs->HomeDir);
      uiinfo_wprintf((DIALOG *)Tmp,((DIALOG *)Tmp)->d[1].i->twin,dirs->CurDir);
      m = _uiFolderMenu(dirs->CurDir);
      uiTruncateString(m,50);
      dir =m;
      break;
  }
  filter = Dgetstring(Tmp,0,1);
  m = _uiFileMenu(dirs->CurDir,filter);
  uiTruncateString(m,50);
  E = (DIE *)kgGetWidget(Tmp,3);
  kgFreeDouble((void **) (E->menu));
  uiCleanEbrowserImages(E);
  E->menu=m;
  kgUpdateWidget(E);
  E = (DIE *)kgGetWidget(Tmp,2);
  kgFreeDouble((void **) (E->menu));
  uiCleanEbrowserImages(E);
  E->menu=dir;
  kgUpdateWidget(E);
//  _ui_updatemenu(Tmp,3,m);
//  _ui_updatemenu(Tmp,2,dir);
  dirs->file=m;
  dirs->dir=dir;
  kgUpdateOn((DIALOG *)Tmp);
  return ret;
}
int FileBrowserinit(void *Tmp) {
  int ret = 1;
  DIRS *dirs;
  DIALOG *D;
  D = (DIALOG *)Tmp;
  DII *I;
  dirs = D->pt;
  I = (DII *)(D->d[1].t);
  uiinfo_wprintf((DIALOG *)Tmp,D->d[1].i->twin,dirs->CurDir);
  return ret;
}
static int uiGetDirFile(char *flname,char *folder) {
  int i;
  i=0;
  i = strlen(flname);
  i--;
  while(flname[i]!= '/') {
     i--;
     if(i<0 ) break;
  }
  if(i< 0) {
    getcwd(folder,499);
  }
  else {
    strcpy(folder,flname);
    strcpy(flname,folder+i+1);
    if(i==0) folder[i++]='/';
    folder[i]='\0';
  }
  return 1;
 }
int kgFolderBrowser( void *parent,int xo,int yo,char *flname,char *fltr) {
  int v2=1,v3=1;
  int v4=1,v5=1;
  int ret=1;
  DIALOG D;
  DIA d[8];
  int dcount,fcount,i;
  char **folder,**file;
  char **dfolder,**dfile,**m=NULL;
  char filter[300],w_file[300]={" "};
  DIRS Dir;

  T_ELMT e0[2]  = { 
    {"File Name:%30s", flname, 1,0,NULL},
    {"Filter   :%30s", fltr, 1,0,NULL}
  };
  DIT t0 = { 
    't',
    20,18,  
    439,88,
    24, 
    1,2, 
    e0,
    1,1,
    NULL,FileBrowsertextbox1callback /* args,Call back */
  };
  t0.type=1;
  DII i1 = { 
    'i',
    15,94,  
    489,127,  
    65,1   
  };
  DIE w2 = { 
    'e',
    7,137,  
    310,400,   
    8,  
    &v2,
    "" ,
    NULL ,
    NULL,FileBrowserbrowser1callback, /* *args, callback */
    20,6,22,1,1,1,0
  };
  DIE w3 = { 
    'e',
    310,137,  
    630,400,   
    8,  
    &v3,
    "" ,
    NULL,
    NULL,FileBrowserbrowser2callback, /* *args, callback */
    20,6,22,1,1,1,0
  };
  int butn1 =1;
  int sw4[2]  = { 
    1, 
    1  
  };
  char *titles4[]  = { 
    "", 
    "", 
    NULL
  };
  void *xpm4[]  = { 
//    "##Okay48.png", 
//    "##Cancel48.png", 
//    &Okay48_str,
//    &Cancel48_str,
    &okay_str,
    &Cancel_str,
    NULL,NULL,NULL,NULL,
    NULL
  };
  int bkgr4[]  = { 
    -1, 
    -1, 
    -1
  };
  char *butncode4  = NULL;
  DILN H4 = { 
    'H',
    258,408,  
    384,471,
    9,0,
    54, 
    54, 
    2,1, 
    &butn1, 
    sw4,
    titles4,
    butncode4,
    NULL,FileBrowserhoribar1callback,/* arg, Callbak */
    xpm4,bkgr4 /* pointers to xpms and colors */
    ,4,0.2
  };
  char *titles5[]  = { 
    "", 
    NULL
  };
  void *xpm5[]  = { 
//    "##Up32.png", 
    &updir_str,
    NULL,
    NULL,NULL,
    NULL
  };
  int bkgr5[]  = { 
    -1, 
    -1
  };
  char *butncode5  = NULL;
  int sw5[]={1,1};
  DIB n5 = { 
    'b',
    465,28,  
    520,83,
    9,9,  
    45, 
    45, 
    1,1, 
    &v4, 
    sw5,
    titles5,
    butncode5,
    NULL,FileBrowserbutnbox1callback, /* args, Callbak */
    xpm5,bkgr5 /* pointers to xpms and colors */
    ,2,0.5
  };
  char *titles6[]  = { 
    "", 
    NULL
  };
  void *xpm6[]  = { 
//   "##Home32.png", 
    &Home_str,
    NULL,NULL,
    NULL
  };
  int bkgr6[]  = { 
    -1, 
    -1
  };
  char *butncode6  = NULL;
  DIB n6 = { 
    'b',
    521,28,  
    576,83,
    9,9,  
    45, 
    45, 
    1,1, 
    &v5, 
    sw5,
    titles6,
    butncode6,
    NULL,FileBrowserbutnbox2callback, /* args, Callbak */
    xpm6,bkgr6 /* pointers to xpms and colors */
    ,2,0.5
  };
  if(getcwd(Dir.HomeDir,499)==NULL) return -1;
//  strcpy(CurDir,HomeDir);
  uiGetDirFile(flname,Dir.CurDir);
  strcpy(filter,fltr);
  e0[1].v=(void *)filter;
  strncpy(w_file,flname,99);
  folder= _uiFolderMenu(Dir.CurDir);
  uiTruncateString(folder,50);
  w2.menu = folder;
  file= _uiFileMenu(Dir.CurDir,filter);
  uiTruncateString(file,50);
  w3.menu = file;
  Dir.file=file;
  Dir.dir= folder;
  d[0].t = &t0;
  d[1].i = &i1;
  d[2].e = &w2;
  d[3].e = &w3;
  d[4].H = &H4;
  d[5].b = &n5;
  d[6].b = &n6;
  d[7].t = NULL;
  D.VerId=1401010200;
  kgInitUi(&D);
  D.d = d;
  D.bkup = 1; /* set to 1 for backup */
  D.bor_type = 4;
  D.df = 6;
  D.tw = 4;
  D.bw = 4;
  D.lw = 4;
  D.rw = 4;
  D.xo = 214;   /* Position of Dialog */ 
  D.yo = 90;
  D.yo = xo;
  D.xo = yo;   /* Position of Dialog */ 
  D.xl = 635;    /*  Length of Dialog */
  D.yl = 478;    /*  Width  of Dialog */
//  D.gc = get_gui_colours();
//  set_gui_colours(D.gc);
  D.Initfun = FileBrowserinit;    /*  Width  of Dialog */
  D.Deco=1;
  D.DrawBkgr=1;
  D.butattn=0;
  D.kbattn=0;
  D.Bkpixmap=NULL;
  D.Callback=NULL;
  D.transparency = 0.0;
  D.Sticky=0;
  D.Fixpos=0;
  D.NoTaskBar=0;
  D.Newwin=0;
  D.parent=parent;
  D.pt = &Dir;
  strcpy(D.name,"Kulina Folder Browser");
  D.StackPos=1;
  D.Shapexpm=NULL;
  if(parent==NULL){
      D.Newwin=1;
  }
  kgDefaultGuiTheme(&(D.gc));
  D.SearchList=NULL;
  D.Resize=0;
  D.ResizeCallback=NULL;
  D.WaitCallback=NULL;
  D.MinWidth=D.MinHeight=200;
  ret= kgUi(&D);
  m =Dir.dir;
  kgFreeDouble((void **)m);
  m =Dir.file;
  kgFreeDouble((void **)m);
  i=0;
  while(flname[i]==' ') i++;
  if(flname[i]< ' ') ret=0;
  else {
    if(strcmp(Dir.CurDir,"/")!= 0) strcat(Dir.CurDir,"/");
    strcat(Dir.CurDir,(char *)flname+i);
    strcpy((char *)flname,Dir.CurDir);
    ret = ret%2;
  }
  return ret;
  
}
char ** _uiFileMenu(char *dir,char *filter) {
  Dlink *L=NULL;
  int type,nf=0,n=0,j=0;
  char code,buf[500],blnk[2]=" ";
  char **m,*item;
  DIR *dp;
  struct dirent *pt=NULL;
  struct stat st;
  dp = opendir(dir);
  if(dp == NULL) return NULL;
  L = Dopen();
  while ((pt=readdir(dp))!=NULL) {
     if(pt->d_name[0]=='.')continue;
/*
*/
#if 1
     strcpy(buf,dir);
     strcat(buf,"/");
     strcat(buf,pt->d_name);
     stat(buf,&st);
     if(S_ISREG(st.st_mode)&&(!S_ISDIR(st.st_mode))) {
#else
#endif
       sprintf(buf,"%-s",pt->d_name);
       if(_filter_string(buf,filter)){
            item= (char *)Malloc(strlen(buf)+5);
            strcpy(item,buf);Dadd(L,item); 
            nf++;
       }
       else {
           continue;
       }
     }
     else continue;
     code='f';
  }
  Resetlink(L);
  nf = Dcount(L);
  Resetlink(L);
  n = (nf)+1;
  m = (char **)Malloc(sizeof(char *)*n);
  j=0;
  while( (m[j]= (char *)Getrecord(L)) != NULL){ j++;}
  arrange(m,nf);
  closedir(dp);
  Dfree(L);
  return m;
}
char **kgFileMenu( char *dir,char *filter) {
 return  _uiFileMenu(dir,filter);
}
int  filebrowsertextbox1callback(int key,int i,void *Tmp) {
  char d_name[150],*filter;
  char **m;
  DIE *E;
  DIA *D;DIT *T;T_ELMT *e; 
  int ret=1;
  D = ((DIALOG *)Tmp)->d;
  m = (char **)((DIALOG *)Tmp)->pt;
  T = D[i].t;
  e = T->elmt;
  getcwd(d_name,149);
  filter = Dgetstring(Tmp,i,1);
  m = _uiFileMenu(d_name,filter);
//  scr_recover();
  uiTruncateString(m,30);
//  _ui_updatemenu(Tmp,2,m);
  E = (DIE *)kgGetWidget(Tmp,2);
  uiCleanEbrowserImages(E);
  kgFreeDouble((void **)E->menu);
  E->menu =m;
  kgUpdateWidget(E);
  ((DIALOG *)Tmp)->pt=m;
  uiUpdateOn((DIALOG *)Tmp);
  return ret;
}
int  filebrowserhoribar1callback(int key,int i,void *Tmp) {
  DIA *D;DILN *B; 
  int n,ret=1; 
  D = ((DIALOG *)Tmp)->d;
  B = D[i].H;
  n = B->nx;
  switch(key) {
    case 1: 
      break;
    case 2: 
      break;
  }
//  scr_recover();
  return ret;
}
int  filebrowserbrowser1callback(int key,int i,void *Tmp) {
  DIA *D;DIE *B; 
  int ret=1; 
  char *m;
  D = ((DIALOG *)Tmp)->d;
  B = D[i].e;
  m=Dgetmenustring(Tmp,i);
  uiRestoreString(m,30);
  Dsetstring(Tmp,0,0,m);
  uiResetString(m,30);

  switch(key) {
    case 1: 
      break;
  }
  uiUpdateOn((DIALOG *)Tmp);
  return ret;
}
int filebrowserinit(void *Tmp) {
  int ret = 1;
  DIALOG *D;
  D = (DIALOG *)Tmp;
  return ret;
}
int kgFileBrowser(void *parent,int x0,int y0,  char *v0, char *v1 ){
  int ret=1;
  DIALOG D;
  DIA d[4];
  int v2=1,i;
  char **m,*item;
  char d_name[150];
  char filter[150],w_file[150]={" "};

  T_ELMT e0[2]  = { 
    {"File Name%30s", v0, 1,0,NULL},
    {"Filter   %30s", v1, 1,0,NULL}
  };
  DIT t0 = { 
    't',
    17,13,  
    427,83,
    20, 
    1,2, 
    e0,
    1,1,
    NULL,filebrowsertextbox1callback /* args,Call back */
  };
  t0.type=0;
  int butn1 =1;
  int sw1[2]  = { 
    1, 
    1  
  };
  char *titles1[]  = { 
    "Okay", 
    "Cancel", 
    NULL
  };
  void *xpm1[]  = { 
    NULL, 
    NULL, 
    NULL,NULL,NULL,NULL,
    NULL
  };
  int bkgr1[]  = { 
    -1, 
    -1, 
    -1
  };
  char *butncode1  = NULL;
  DILN H1 = { 
    'H',
    120,296,  
    308,334,
    20,0,
    80, 
    30, 
    2,1, 
    &butn1, 
    sw1,
    titles1,
    butncode1,
    NULL,filebrowserhoribar1callback,/* arg, Callbak */
    xpm1,bkgr1 /* pointers to xpms and colors */
    ,2,0.2
  };
  DIE w2 = { 
    'e',
    19,90,  
    428,294   ,
    7,  
    &v2,
    "" ,
    NULL ,
    NULL,filebrowserbrowser1callback, /* *args, callback */
    20,6,22,1,1,1,0
  };
  getcwd(d_name,149);
//  printf("Dir: %s\n",d_name);
  strcpy(filter,v1);
  e0[1].v=filter;
  strncpy(w_file,v0,99);
  m = _uiFileMenu(d_name,filter);
  uiTruncateString(m,30);
  w2.menu = m;

  d[0].t = &t0;
  d[1].H = &H1;
  d[2].e = &w2;
  d[3].t = NULL;
  D.VerId=1401010200;
  kgInitUi(&D);
  D.d = d;
  D.bkup = 1; /* set to 1 for backup */
  D.bor_type = 4;
  D.df = -1;
  D.tw = 4;
  D.bw = 4;
  D.lw = 4;
  D.rw = 4;
  D.xo = x0;   /* Position of Dialog */ 
  D.yo = y0;
  D.xl = 445;    /*  Length of Dialog */
  D.yl = 345;    /*  Width  of Dialog */
  D.Initfun = filebrowserinit;    /*  Width  of Dialog */
  D.Deco=1;
  D.DrawBkgr=1;
  D.Bkpixmap=NULL;
  D.Callback=NULL;
  D.transparency = 0.0;
  D.Sticky=0;
  D.Fixpos=0;
  D.NoTaskBar=0;
  D.Newwin=0;
  D.parent=parent;
  D.StackPos=1;
  D.Shapexpm=NULL;
  if(parent==NULL) D.Newwin=1;
//  printf("Newwin:%d\n", D.Newwin);
  strcpy(D.name,"File Browser");
  kgDefaultGuiTheme(&(D.gc));    /*  set colors for gui*/
  D.pt=m;
  D.SearchList=NULL;
  D.Resize=0;
  D.ResizeCallback=NULL;
  D.WaitCallback=NULL;
  D.MinWidth=D.MinHeight=200;
  ret= kgUi(&D);
//  m =Dgetmenu(&D,2);
  m= (char **)D.pt;
  i=0;
  while(m[i]!=NULL) {free(m[i]);i++;}
  free(m);
  ret = ret%2;
  return ret;
}
